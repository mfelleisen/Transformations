#lang racket

(define MOD (+ 1 (expt 10 9)))

(define (numberOfWays n x)
  ;; Helper function to initialize the dp list with zeros and set dp[0] to 1
  (define dp-init (cons 1 (make-list n 0)))

  ;; Helper function to compute the max base such that base^x <= n
  (define max-base (inexact->exact (floor (expt n (/ 1 x)))))

  ;; Helper function to update dp values from n down to current-power
  (define (update-dp dp base)
    (let ((current-power (expt base x)))
      (for/fold ([dp dp]) ([i (in-range n (- current-power 1) -1)])
        (let ((updated-val (modulo (+ (list-ref dp i) (list-ref dp (- i current-power))) MOD)))
          (list-set dp i updated-val)))))

  ;; Iterate over each possible base and update dp vector
  (let ((final-dp (for/fold ([dp dp-init]) ([base (in-range 1 (+ max-base 1))])
                    (update-dp dp base))))
    ;; Return the number of ways to express n as specified
    (list-ref final-dp n)))

;; Example usages
(numberOfWays 10 2)  ;; Output: 1
(numberOfWays 4 1)   ;; Output: 2

(require rackunit)


(define (test-humaneval) 

  (let (( candidate numberOfWays))
    (check-within (candidate 10 2) 1 0.001)
    (check-within (candidate 4 1) 2 0.001)
    (check-within (candidate 1 1) 1 0.001)
    (check-within (candidate 1 2) 1 0.001)
    (check-within (candidate 1 3) 1 0.001)
    (check-within (candidate 1 4) 1 0.001)
    (check-within (candidate 1 5) 1 0.001)
    (check-within (candidate 2 1) 1 0.001)
    (check-within (candidate 2 2) 0 0.001)
    (check-within (candidate 2 3) 0 0.001)
    (check-within (candidate 2 4) 0 0.001)
    (check-within (candidate 2 5) 0 0.001)
    (check-within (candidate 3 1) 2 0.001)
    (check-within (candidate 3 2) 0 0.001)
    (check-within (candidate 3 3) 0 0.001)
    (check-within (candidate 3 4) 0 0.001)
    (check-within (candidate 3 5) 0 0.001)
    (check-within (candidate 4 2) 1 0.001)
    (check-within (candidate 4 3) 0 0.001)
    (check-within (candidate 4 4) 0 0.001)
    (check-within (candidate 4 5) 0 0.001)
    (check-within (candidate 5 1) 3 0.001)
    (check-within (candidate 5 2) 1 0.001)
    (check-within (candidate 5 3) 0 0.001)
    (check-within (candidate 5 4) 0 0.001)
    (check-within (candidate 5 5) 0 0.001)
    (check-within (candidate 6 1) 4 0.001)
    (check-within (candidate 6 2) 0 0.001)
    (check-within (candidate 6 3) 0 0.001)
    (check-within (candidate 6 4) 0 0.001)
    (check-within (candidate 6 5) 0 0.001)
    (check-within (candidate 7 1) 5 0.001)
    (check-within (candidate 7 2) 0 0.001)
    (check-within (candidate 7 3) 0 0.001)
    (check-within (candidate 7 4) 0 0.001)
    (check-within (candidate 7 5) 0 0.001)
    (check-within (candidate 8 1) 6 0.001)
    (check-within (candidate 8 2) 0 0.001)
    (check-within (candidate 8 3) 1 0.001)
    (check-within (candidate 8 4) 0 0.001)
    (check-within (candidate 8 5) 0 0.001)
    (check-within (candidate 9 1) 8 0.001)
    (check-within (candidate 9 2) 1 0.001)
    (check-within (candidate 9 3) 1 0.001)
    (check-within (candidate 9 4) 0 0.001)
    (check-within (candidate 9 5) 0 0.001)
    (check-within (candidate 10 1) 10 0.001)
    (check-within (candidate 10 3) 0 0.001)
    (check-within (candidate 10 4) 0 0.001)
    (check-within (candidate 10 5) 0 0.001)
    (check-within (candidate 11 1) 12 0.001)
    (check-within (candidate 11 2) 0 0.001)
    (check-within (candidate 11 3) 0 0.001)
    (check-within (candidate 11 4) 0 0.001)
    (check-within (candidate 11 5) 0 0.001)
    (check-within (candidate 12 1) 15 0.001)
    (check-within (candidate 12 2) 0 0.001)
    (check-within (candidate 12 3) 0 0.001)
    (check-within (candidate 12 4) 0 0.001)
    (check-within (candidate 12 5) 0 0.001)
    (check-within (candidate 13 1) 18 0.001)
    (check-within (candidate 13 2) 1 0.001)
    (check-within (candidate 13 3) 0 0.001)
    (check-within (candidate 13 4) 0 0.001)
    (check-within (candidate 13 5) 0 0.001)
    (check-within (candidate 14 1) 22 0.001)
    (check-within (candidate 14 2) 1 0.001)
    (check-within (candidate 14 3) 0 0.001)
    (check-within (candidate 14 4) 0 0.001)
    (check-within (candidate 14 5) 0 0.001)
    (check-within (candidate 15 1) 27 0.001)
    (check-within (candidate 15 2) 0 0.001)
    (check-within (candidate 15 3) 0 0.001)
    (check-within (candidate 15 4) 0 0.001)
    (check-within (candidate 15 5) 0 0.001)
    (check-within (candidate 16 1) 32 0.001)
    (check-within (candidate 16 2) 1 0.001)
    (check-within (candidate 16 3) 0 0.001)
    (check-within (candidate 16 4) 1 0.001)
    (check-within (candidate 16 5) 0 0.001)
    (check-within (candidate 17 1) 38 0.001)
    (check-within (candidate 17 2) 1 0.001)
    (check-within (candidate 17 3) 0 0.001)
    (check-within (candidate 17 4) 1 0.001)
    (check-within (candidate 17 5) 0 0.001)
    (check-within (candidate 18 1) 46 0.001)
    (check-within (candidate 18 2) 0 0.001)
    (check-within (candidate 18 3) 0 0.001)
    (check-within (candidate 18 4) 0 0.001)
    (check-within (candidate 18 5) 0 0.001)
    (check-within (candidate 19 1) 54 0.001)
    (check-within (candidate 19 2) 0 0.001)
    (check-within (candidate 19 3) 0 0.001)
    (check-within (candidate 19 4) 0 0.001)
    (check-within (candidate 19 5) 0 0.001)
    (check-within (candidate 20 1) 64 0.001)
    (check-within (candidate 20 2) 1 0.001)
    (check-within (candidate 20 3) 0 0.001)
    (check-within (candidate 20 4) 0 0.001)
    (check-within (candidate 20 5) 0 0.001)
))

(test-humaneval)