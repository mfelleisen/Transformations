#lang racket
;; Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

;; Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].
;; Example 1:
;; Input: n = 13, k = 2
;; Output: 10
;; Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.
;; Example 2:
;; Input: n = 1, k = 1
;; Output: 1
;; Constraints:
;; 1 <= k <= n <= 109
(define (find_kth_number n k)
  ;; Use the `build-list` function to generate a list of integers from 1 to n.
  (let* ((nums (build-list n (lambda (i) (+ i 1))))
         ;; Convert each integer in the list to its string representation,
         ;; sort them lexicographically, and then convert back to integers.
         (sorted-nums (map string->number (sort (map number->string nums) string<?))))
    ;; Return the k-th element (1-based indexing) from the sorted list.
    (list-ref sorted-nums (- k 1))))

;; The `build-list` function creates a list of size n, where each element is generated by the provided lambda function.
;; The `map` function is used to apply a function over each element of a list.
;; The `sort` function arranges elements of a list based on a given comparison function, `string<?` in this case for lexicographic comparison.
;; `number->string` and `string->number` are used to convert between numerical and string representations.
;; `list-ref` is used to access the k-th element of the list (note that list indices start at 0 in Racket, hence the `- k 1`).
(require rackunit)

(define (test-humaneval) 

  (let (( candidate find_kth_number))
    (check-within (candidate 9999 9999) 9999 0.001)
    (check-within (candidate 2 1) 1 0.001)
    (check-within (candidate 100 10) 17 0.001)
    (check-within (candidate 10000 1) 1 0.001)
    (check-within (candidate 13 1) 1 0.001)
    (check-within (candidate 1 1) 1 0.001)
    (check-within (candidate 2 2) 2 0.001)
    (check-within (candidate 13 2) 10 0.001)
    (check-within (candidate 1000 1) 1 0.001)
    (check-within (candidate 100 2) 10 0.001)
    (check-within (candidate 100 1) 1 0.001)
    (check-within (candidate 15 1) 1 0.001)
    (check-within (candidate 100000 1) 1 0.001)
))

(test-humaneval)